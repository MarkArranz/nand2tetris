// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* FLOW of CPU
       1. A-instruction or C-instruction?
            * If MSB of instruction = 0, then load instruction to A-Register.
            * IF MSB of instruction = 1, then decode instruction as a C-instruction.
       2. For C-instruction, decode instruction.
            * instruction[6..12] = comp = what to compute
            * instruction[3..5]  = dest = where to store the value
            * instruction[0..2]  = jump = what to do next
       3. For A-instruction, load instruction to A-register.
    **/

    // 1. A-instruction or C-instruction?
    //     * If MSB of instruction = 0, then load instruction to A-Register.
    //     * IF MSB of instruction = 1, then decode instruction as a C-instruction.
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);

    // 2. For C-instruction, decode instruction.
    //     * instruction[0..2]  = jump = what to do next
    DMux8Way(in=isCInstruction, sel=instruction[0..2],
        a=jumpNVR, b=ifGT, c=ifEQ, d=ifGE,
        e=ifLT,    f=ifNE, g=ifLE, h=jumpJMP);

    // Is NOT ZERO
    Not(in=isZero, out=isNotZero);
    // Is NOT NEGATIVE
    Not(in=isNeg, out=isNotNeg);
    // Is POSITIVE
    And(a=isNotZero, b=isNotNeg, out=isPos);

    // Jump because comp is...
    // ...> 0?
    And(a=ifGT, b=isPos, out=jumpGT);
    // ... == 0?
    And(a=ifEQ, b=isZero, out=jumpEQ);
    // ... >= 0?
    Or(a=isPos, b=isZero, out=isGE);
    And(a=ifGE, b=isGE, out=jumpGE);
    // ... < 0?
    And(a=ifLT, b=isNeg, out=jumpLT);
    // ... != 0?
    And(a=ifNE, b=isNotZero, out=jumpNE);
    // ... <= 0?
    Or(a=isNeg, b=isZero, out=isLE);
    And(a=ifLE, b=isLE, out=jumpLE);

    // Conditional JUMP?
    Or8Way(
        in[0]=false, // no effect
        in[1]=jumpGT,
        in[2]=jumpEQ,
        in[3]=jumpGE,
        in[4]=jumpLT,
        in[5]=jumpNE,
        in[6]=jumpLE,
        in[7]=jumpJMP,
        out=jumpMet);

    //     * instruction[3..5]  = dest = where to store the value
    //          i[3]: storeInM
    And(a=instruction[3], b=isCInstruction, out=storeInM);
    Mux(a=false, b=true, sel=storeInM, out=writeM);
    Mux16(a=false, b=fromALU, sel=storeInM, out=outM);
    //          i[4]: storeInD
    And(a=instruction[4], b=isCInstruction, out=loadRegD);
    //          i[5]: storeInA
    And(a=instruction[5], b=isCInstruction, out=loadFromALU);
    Or(a=isAInstruction, b=loadFromALU, out=loadRegA);

    //     * instruction[6..12] = comp = what to compute
    //          i[12] = a
    //          a = 0: use A
    //          a = 1: use M
    And(a=instruction[12], b=isCInstruction, out=selectM);

    /* KEY CPU CHIPS */
    // 3. For A-instruction, load instruction to A-register
    Mux16(a=instruction, b=fromALU, sel=loadFromALU, out=fromMux0);

    // Address Register
    // 1. stores values that are used to address the RAM
    // 2. selects an address in the instruction memory
    // 3. selects an address in the data memory
    ARegister(in=fromMux0, load=loadRegA, out=fromRegA, out[0..14]=addressM);
    Mux16(a=fromRegA, b=inM, sel=selectM, out=fromAorM);

    // Data Register
    // - stores interim values
    DRegister(in=fromALU, load=loadRegD, out=fromRegD);
    Mux16(a=false, b=fromRegD, sel=isCInstruction, out=useRegD);

    // Arithmetic Logic Unit
    ALU(x=useRegD, y=fromAorM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8],  f=instruction[7],   no=instruction[6],
        out=fromALU, 
        zr=isZero, ng=isNeg);

    // Program Counter
    // - stores the address of the instruction that should be
    //   fetched and executed next
    And(a=jumpMet, b=isCInstruction, out=loadFromA);

    Not(in=jumpMet, out=jumpNotMet);
    Or(a=jumpNotMet, b=jumpNVR, out=noJump);
    Or(a=noJump, b=isAInstruction, out=takeInc);

    PC(in=fromRegA, load=loadFromA, inc=takeInc, reset=reset, out[0..14]=pc);
}